

setwd("D:/Work/AF/Rdata/Deg/")

library(Seurat)
library(ggplot2)
library(patchwork)
library(ggpubr)
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(ggplot2)
library(pheatmap)
library(Seurat)
library(ggplot2)
library(Matrix)
library(RColorBrewer)
library(dplyr)
library(scales)
library(data.table)
library(stats)
library("Nebulosa")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(magrittr)
library(dplyr)
library(VennDiagram)
library(ggrepel)

 
set.seed(12345)


##### AFleft vs AFright
Adipocyte <- read_delim("./DE_analysis/AFleft_AFright/Adipocyte_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Adipocyte$cell <- "Adipocyte"
Adipocyte$sigpvalue <- ifelse(Adipocyte$padj < 0.05, "p < 0.05","p > 0.05")
Adipocyte$sig <- ifelse(Adipocyte$padj < 0.05 & abs(Adipocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Cardiomyocyte <- read_delim("./DE_analysis/AFleft_AFright/Cardiomyocyte_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Cardiomyocyte$cell <- "Cardiomyocyte"
Cardiomyocyte$sigpvalue <- ifelse(Cardiomyocyte$padj < 0.05, "p < 0.05","p > 0.05")
Cardiomyocyte$sig <- ifelse(Cardiomyocyte$padj < 0.05 & abs(Cardiomyocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Endothelial <- read_delim("./DE_analysis/AFleft_AFright/Endothelial_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Endothelial$cell <- "Endothelial"
Endothelial$sigpvalue <- ifelse(Endothelial$padj < 0.05, "p < 0.05","p > 0.05")
Endothelial$sig <- ifelse(Endothelial$padj < 0.05 & abs(Endothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Fibroblast <- read_delim("./DE_analysis/AFleft_AFright/Fibroblast_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Fibroblast$cell <- "Fibroblast"
Fibroblast$sigpvalue <- ifelse(Fibroblast$padj < 0.05, "p < 0.05","p > 0.05")
Fibroblast$sig <- ifelse(Fibroblast$padj < 0.05 & abs(Fibroblast$log2FoldChange) > 0.58, "Significant","Not Significant")

Lymphoid <- read_delim("./DE_analysis/AFleft_AFright/Lymphoid_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Lymphoid$cell <- "Lymphoid"
Lymphoid$sigpvalue <- ifelse(Lymphoid$padj < 0.05, "p < 0.05","p > 0.05")
Lymphoid$sig <- ifelse(Lymphoid$padj < 0.05 & abs(Lymphoid$log2FoldChange) > 0.58, "Significant","Not Significant")
 
Mesothelial <- read_delim("./DE_analysis/AFleft_AFright/Mesothelial_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mesothelial$cell <- "Mesothelial"
Mesothelial$sigpvalue <- ifelse(Mesothelial$padj < 0.05, "p < 0.05","p > 0.05")
Mesothelial$sig <- ifelse(Mesothelial$padj < 0.05 & abs(Mesothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Myeloid <- read_delim("./DE_analysis/AFleft_AFright/Myeloid_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Myeloid$cell <- "Myeloid"
Myeloid$sigpvalue <- ifelse(Myeloid$padj < 0.05, "p < 0.05","p > 0.05")
Myeloid$sig <- ifelse(Myeloid$padj < 0.05 & abs(Myeloid$log2FoldChange) > 0.58, "Significant","Not Significant")

Mural <- read_delim("./DE_analysis/AFleft_AFright/Mural_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mural$cell <- "Mural"
Mural$sigpvalue <- ifelse(Mural$padj < 0.05, "p < 0.05","p > 0.05")
Mural$sig <- ifelse(Mural$padj < 0.05 & abs(Mural$log2FoldChange) > 0.58, "Significant","Not Significant")

Neuron <- read_delim("./DE_analysis/AFleft_AFright/Neuron_left_vs_right_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Neuron$cell <- "Neuron"
Neuron$sigpvalue <- ifelse(Neuron$padj < 0.05, "p < 0.05","p > 0.05")
Neuron$sig <- ifelse(Neuron$padj < 0.05 & abs(Neuron$log2FoldChange) > 0.58, "Significant","Not Significant")

#create data frame
data <- data.frame(rbind(Adipocyte, Cardiomyocyte, Endothelial, Fibroblast, Lymphoid, Mesothelial, Myeloid, Mural, Neuron))
data$cell <- factor(data$cell, levels = c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid", "Mesothelial", "Myeloid", "Mural", "Neuron"))

data$cluster <- ifelse(data$log2FoldChange > 0, "AFleft", "AFright")
data_AFleft_AFright <- filter(data, data$sig == "Significant")
######



##### AFleft vs Ctrlleft
Adipocyte <- read_delim("./DE_analysis/AFleft_Ctrlleft/Adipocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Adipocyte$cell <- "Adipocyte"
Adipocyte$sigpvalue <- ifelse(Adipocyte$padj < 0.05, "p < 0.05","p > 0.05")
Adipocyte$sig <- ifelse(Adipocyte$padj < 0.05 & abs(Adipocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Cardiomyocyte <- read_delim("./DE_analysis/AFleft_Ctrlleft/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Cardiomyocyte$cell <- "Cardiomyocyte"
Cardiomyocyte$sigpvalue <- ifelse(Cardiomyocyte$padj < 0.05, "p < 0.05","p > 0.05")
Cardiomyocyte$sig <- ifelse(Cardiomyocyte$padj < 0.05 & abs(Cardiomyocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Endothelial <- read_delim("./DE_analysis/AFleft_Ctrlleft/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Endothelial$cell <- "Endothelial"
Endothelial$sigpvalue <- ifelse(Endothelial$padj < 0.05, "p < 0.05","p > 0.05")
Endothelial$sig <- ifelse(Endothelial$padj < 0.05 & abs(Endothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Fibroblast <- read_delim("./DE_analysis/AFleft_Ctrlleft/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Fibroblast$cell <- "Fibroblast"
Fibroblast$sigpvalue <- ifelse(Fibroblast$padj < 0.05, "p < 0.05","p > 0.05")
Fibroblast$sig <- ifelse(Fibroblast$padj < 0.05 & abs(Fibroblast$log2FoldChange) > 0.58, "Significant","Not Significant")

Lymphoid <- read_delim("./DE_analysis/AFleft_Ctrlleft/Lymphoid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Lymphoid$cell <- "Lymphoid"
Lymphoid$sigpvalue <- ifelse(Lymphoid$padj < 0.05, "p < 0.05","p > 0.05")
Lymphoid$sig <- ifelse(Lymphoid$padj < 0.05 & abs(Lymphoid$log2FoldChange) > 0.58, "Significant","Not Significant")
 
Mesothelial <- read_delim("./DE_analysis/AFleft_Ctrlleft/Mesothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mesothelial$cell <- "Mesothelial"
Mesothelial$sigpvalue <- ifelse(Mesothelial$padj < 0.05, "p < 0.05","p > 0.05")
Mesothelial$sig <- ifelse(Mesothelial$padj < 0.05 & abs(Mesothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Myeloid <- read_delim("./DE_analysis/AFleft_Ctrlleft/Myeloid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Myeloid$cell <- "Myeloid"
Myeloid$sigpvalue <- ifelse(Myeloid$padj < 0.05, "p < 0.05","p > 0.05")
Myeloid$sig <- ifelse(Myeloid$padj < 0.05 & abs(Myeloid$log2FoldChange) > 0.58, "Significant","Not Significant")

Mural <- read_delim("./DE_analysis/AFleft_Ctrlleft/Mural_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mural$cell <- "Mural"
Mural$sigpvalue <- ifelse(Mural$padj < 0.05, "p < 0.05","p > 0.05")
Mural$sig <- ifelse(Mural$padj < 0.05 & abs(Mural$log2FoldChange) > 0.58, "Significant","Not Significant")

Neuron <- read_delim("./DE_analysis/AFleft_Ctrlleft/Neuron_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Neuron$cell <- "Neuron"
Neuron$sigpvalue <- ifelse(Neuron$padj < 0.05, "p < 0.05","p > 0.05")
Neuron$sig <- ifelse(Neuron$padj < 0.05 & abs(Neuron$log2FoldChange) > 0.58, "Significant","Not Significant")

#create data frame
data <- data.frame(rbind(Adipocyte, Cardiomyocyte, Endothelial, Fibroblast, Lymphoid, Mesothelial, Myeloid, Mural, Neuron))
data$cell <- factor(data$cell, levels = c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid", "Mesothelial", "Myeloid", "Mural", "Neuron"))

data$cluster <- ifelse(data$log2FoldChange > 0, "AFleft", "Ctrlleft")
data_AFleft_Ctrlleft <- filter(data, data$sig == "Significant")
######


##### AFright vs Ctrlright
Adipocyte <- read_delim("./DE_analysis/AFright_Ctrlright/Adipocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Adipocyte$cell <- "Adipocyte"
Adipocyte$sigpvalue <- ifelse(Adipocyte$padj < 0.05, "p < 0.05","p > 0.05")
Adipocyte$sig <- ifelse(Adipocyte$padj < 0.05 & abs(Adipocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Cardiomyocyte <- read_delim("./DE_analysis/AFright_Ctrlright/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Cardiomyocyte$cell <- "Cardiomyocyte"
Cardiomyocyte$sigpvalue <- ifelse(Cardiomyocyte$padj < 0.05, "p < 0.05","p > 0.05")
Cardiomyocyte$sig <- ifelse(Cardiomyocyte$padj < 0.05 & abs(Cardiomyocyte$log2FoldChange) > 0.58, "Significant","Not Significant")

Endothelial <- read_delim("./DE_analysis/AFright_Ctrlright/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Endothelial$cell <- "Endothelial"
Endothelial$sigpvalue <- ifelse(Endothelial$padj < 0.05, "p < 0.05","p > 0.05")
Endothelial$sig <- ifelse(Endothelial$padj < 0.05 & abs(Endothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Fibroblast <- read_delim("./DE_analysis/AFright_Ctrlright/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Fibroblast$cell <- "Fibroblast"
Fibroblast$sigpvalue <- ifelse(Fibroblast$padj < 0.05, "p < 0.05","p > 0.05")
Fibroblast$sig <- ifelse(Fibroblast$padj < 0.05 & abs(Fibroblast$log2FoldChange) > 0.58, "Significant","Not Significant")

Lymphoid <- read_delim("./DE_analysis/AFright_Ctrlright/Lymphoid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Lymphoid$cell <- "Lymphoid"
Lymphoid$sigpvalue <- ifelse(Lymphoid$padj < 0.05, "p < 0.05","p > 0.05")
Lymphoid$sig <- ifelse(Lymphoid$padj < 0.05 & abs(Lymphoid$log2FoldChange) > 0.58, "Significant","Not Significant")
 
Mesothelial <- read_delim("./DE_analysis/AFright_Ctrlright/Mesothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mesothelial$cell <- "Mesothelial"
Mesothelial$sigpvalue <- ifelse(Mesothelial$padj < 0.05, "p < 0.05","p > 0.05")
Mesothelial$sig <- ifelse(Mesothelial$padj < 0.05 & abs(Mesothelial$log2FoldChange) > 0.58, "Significant","Not Significant")

Myeloid <- read_delim("./DE_analysis/AFright_Ctrlright/Myeloid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Myeloid$cell <- "Myeloid"
Myeloid$sigpvalue <- ifelse(Myeloid$padj < 0.05, "p < 0.05","p > 0.05")
Myeloid$sig <- ifelse(Myeloid$padj < 0.05 & abs(Myeloid$log2FoldChange) > 0.58, "Significant","Not Significant")

Mural <- read_delim("./DE_analysis/AFright_Ctrlright/Mural_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Mural$cell <- "Mural"
Mural$sigpvalue <- ifelse(Mural$padj < 0.05, "p < 0.05","p > 0.05")
Mural$sig <- ifelse(Mural$padj < 0.05 & abs(Mural$log2FoldChange) > 0.58, "Significant","Not Significant")

Neuron <- read_delim("./DE_analysis/AFright_Ctrlright/Neuron_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
Neuron$cell <- "Neuron"
Neuron$sigpvalue <- ifelse(Neuron$padj < 0.05, "p < 0.05","p > 0.05")
Neuron$sig <- ifelse(Neuron$padj < 0.05 & abs(Neuron$log2FoldChange) > 0.58, "Significant","Not Significant")

#create data frame
data <- data.frame(rbind(Adipocyte, Cardiomyocyte, Endothelial, Fibroblast, Lymphoid, Mesothelial, Myeloid, Mural, Neuron))
data$cell <- factor(data$cell, levels = c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid", "Mesothelial", "Myeloid", "Mural", "Neuron"))

data$cluster <- ifelse(data$log2FoldChange > 0, "AFright", "Ctrlright")
data_AFright_Ctrlright <- filter(data, data$sig == "Significant")
######

dir.create("DE_analysis/AF_unique_genes/")

###### Functionalize 
# AFleft
# Genes Up
# Initialize lists
cell_types <- c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid",  "Mesothelial", "Myeloid", "Mural", "Neuron")
direction <- c("Up","Up", "Up", "Up", "Up", "Up", "Up", "Up", "Up" )
n_genes <- c()

data_AFleft_Ctrlleft_AFleft <- filter(data_AFleft_Ctrlleft, data_AFleft_Ctrlleft$cluster == "AFleft")
data_AFright_Ctrlright_AFright <- filter(data_AFright_Ctrlright, data_AFright_Ctrlright$cluster == "AFright")
data_AFleft_AFright_AFleft <- filter(data_AFleft_AFright, data_AFleft_AFright$cluster == "AFleft")

j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == i)$gene
    data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == i)$gene
    data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == i)$gene
    
    desired_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset,
                              data_AFright_Ctrlright_AFright_subset)

    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset, data_AFright_Ctrlright_AFright_subset)))
    n_desired_genes <- length(desired_genes) 
    n_genes[j] <- n_desired_genes
    j <- j + 1
}
df_up <- data.frame(cell_types,direction,n_genes)

# Genes Down
# Initialize lists
cell_types <- c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid",  "Mesothelial", "Myeloid", "Mural", "Neuron")
direction <- c("Down","Down", "Down", "Down", "Down", "Down", "Down", "Down",   "Down")
n_genes <- c()

data_AFleft_Ctrlleft_Ctrlleft <- filter(data_AFleft_Ctrlleft, data_AFleft_Ctrlleft$cluster == "Ctrlleft")
data_AFright_Ctrlright_Ctrlright <- filter(data_AFright_Ctrlright, data_AFright_Ctrlright$cluster == "Ctrlright")
data_AFleft_AFright_AFright <- filter(data_AFleft_AFright, data_AFleft_AFright$cluster == "AFright")

j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == i)$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == i)$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == i)$gene
    
    desired_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset , data_AFright_Ctrlright_Ctrlright_subset)
    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset, data_AFright_Ctrlright_Ctrlright_subset)))
    n_desired_genes <- length(desired_genes) 
    n_genes[j] <- n_desired_genes
    j <- j + 1
}
df_down <- data.frame(cell_types,direction,n_genes)

df <- rbind(df_up, df_down)
df$n_genes <- as.numeric(df$n_genes)
df$sumGenes <- df_up$n_genes + df_down$n_genes
df_Count <- df[order(-df$sumGenes),]

df_Count <- data.frame(df_Count)
df_Count$cell_types <- factor(df_Count$cell_types, levels=c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid","Mediate",  "Mesothelial", "Myeloid", "Mural", "Neuron"))

p1 <- ggplot(df_Count, aes(x = reorder(cell_types,-n_genes), y = n_genes, fill = direction)) + geom_col() + labs(x="Cell Type", y="#Genes", fill="Significance") + scale_fill_manual(values = c("dodgerblue4", "red3")) + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
ggtitle('Signature_AF_left')
ggsave(p1,  filename = paste("./DE_analysis/AF_unique_genes/ngenes_AF_left.pdf",sep=""), height = 4, width = 5)

write.csv(df_Count, "./DE_analysis/AF_unique_genes/n_uniquegenes_AFleft.csv",
          quote = FALSE, 
          row.names = FALSE)
n_uniquegenes_AFleft <- df_Count


# AFright
# Genes Up
# Initialize lists
cell_types <- c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid",  "Mesothelial", "Myeloid", "Mural", "Neuron")
direction <- c("Up","Up", "Up", "Up", "Up", "Up", "Up", "Up",   "Up")
n_genes <- c()

data_AFleft_Ctrlleft_AFleft <- filter(data_AFleft_Ctrlleft, data_AFleft_Ctrlleft$cluster == "AFleft")
data_AFright_Ctrlright_AFright <- filter(data_AFright_Ctrlright, data_AFright_Ctrlright$cluster == "AFright")
data_AFleft_AFright_AFright <- filter(data_AFleft_AFright, data_AFleft_AFright$cluster == "AFright")

j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == i)$gene
    data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == i)$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == i)$gene
    
    desired_genes <- setdiff(data_AFright_Ctrlright_AFright_subset, data_AFleft_Ctrlleft_AFleft_subset)

    #desired_genes <- setdiff(Reduce(intersect,list(data_AFright_Ctrlright_AFright_subset, data_AFleft_AFright_AFright_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFright_subset, data_AFright_Ctrlright_AFright_subset)))
    n_desired_genes <- length(desired_genes) 
    n_genes[j] <- n_desired_genes
    j <- j + 1
}
df_up <- data.frame(cell_types,direction,n_genes)

# Genes Down
# Initialize lists
cell_types <- c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid",  "Mesothelial", "Myeloid", "Mural", "Neuron")
direction <- c("Down","Down", "Down", "Down", "Down", "Down", "Down", "Down",   "Down")
n_genes <- c()

data_AFleft_Ctrlleft_Ctrlleft <- filter(data_AFleft_Ctrlleft, data_AFleft_Ctrlleft$cluster == "Ctrlleft")
data_AFright_Ctrlright_Ctrlright <- filter(data_AFright_Ctrlright, data_AFright_Ctrlright$cluster == "Ctrlright")
data_AFleft_AFright_AFleft <- filter(data_AFleft_AFright, data_AFleft_AFright$cluster == "AFleft")

j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == i)$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == i)$gene
    data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == i)$gene
    
    desired_genes <- setdiff(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_Ctrlleft_Ctrlleft_subset)

   # desired_genes <- setdiff(Reduce(intersect,list(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_AFright_AFleft_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFleft_subset, data_AFright_Ctrlright_Ctrlright_subset)))
    n_desired_genes <- length(desired_genes) 
    n_genes[j] <- n_desired_genes
    j <- j + 1
}
df_down <- data.frame(cell_types,direction,n_genes)

df <- rbind(df_up, df_down)
df$n_genes <- as.numeric(df$n_genes)
df$sumGenes <- df_up$n_genes + df_down$n_genes
df_Count <- df[order(-df$sumGenes),]

df_Count <- data.frame(df_Count)
df_Count$cell_types <- factor(df_Count$cell_types, levels=c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid","Mediate",  "Mesothelial", "Myeloid", "Mural", "Neuron"))

p1 <- ggplot(df_Count, aes(x = reorder(cell_types,-n_genes), y = n_genes, fill = direction)) + geom_col() + labs(x="Cell Type", y="#Genes", fill="Significance") + scale_fill_manual(values = c("dodgerblue4", "red3")) + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
ggtitle('Signature_AF_right')
ggsave(p1,  filename = paste("./DE_analysis/AF_unique_genes/ngenes_AF_right.pdf",sep=""), height = 4, width = 5)

write.csv(df_Count, "./DE_analysis/AF_unique_genes/n_uniquegenes_AFright.csv",
          quote = FALSE, 
          row.names = FALSE)
n_uniquegenes_AFright <- df_Count
#####

library(ggsci)
mycolor1<-pal_npg("nrc", alpha = 1)(10)
mycolor2<-pal_aaas("default", alpha = 1)(10)
mycolor3<-pal_nejm("default", alpha = 1)(8)
mycolor4<-pal_lancet("lanonc", alpha = 1)(9)
mycolor5<-pal_jama("default", alpha = 1)(7)
mycolor6<-pal_jco("default", alpha = 1)(10)
mycolor <-c(mycolor3,mycolor2,mycolor1,mycolor4,mycolor5,mycolor6)

##### Scatter plot
colnames(n_uniquegenes_AFleft) <- c('cell_types_AFleft', 'direction_AFleft', 'n_genes_AFleft', 'sumGenes_AFleft')
colnames(n_uniquegenes_AFright) <- c('cell_types_AFright', 'direction_AFright', 'n_genes_AFright', 'sumGenes_AFright')
n_uniquegenes_AFleft <- n_uniquegenes_AFleft[order(n_uniquegenes_AFleft$cell_types),]
n_uniquegenes_AFright <- n_uniquegenes_AFright[order(n_uniquegenes_AFright$cell_types),]
remodeling <- cbind(n_uniquegenes_AFleft, n_uniquegenes_AFright)
remodeling <- select(remodeling, -5)
remodeling$lr <- remodeling$sumGenes_AFleft +remodeling$sumGenes_AFright
write.csv(remodeling, "./DE_analysis/AF_unique_genes/n_uniquegenes_remodeling.csv",
          quote = FALSE, 
          row.names = FALSE)

remodelings <- select(remodeling, -2)
remodelings <- select(remodelings, -2)
remodelings <- select(remodelings, -3)
remodelings <- select(remodelings, -3)
remodelings <- unique(remodelings)

p1_lr <- ggplot(remodelings, aes(sumGenes_AFleft, sumGenes_AFright, color=cell_types_AFleft)) +
  geom_point(aes(size=lr)) +
  geom_label_repel(data = subset(remodelings, lr >60), aes(label = cell_types_AFleft), color = 'black', segment.color = 'black', segment.size = 0.5, size = 4, force = T, nudge_x = 100, nudge_y = 100 )+
  scale_color_manual(values=mycolor) +
  xlab("Gene Counts of Signature_AF_left") +
  ylab("Gene Counts Signature_AF_right") + xlim(0,800) + ylim(0,800)+
  ggtitle("Signature_AF_left vs Signature_AF_right")+
  theme(plot.title = element_text(hjust = 0.5),
             legend.position = 'none',
             panel.background = element_rect(fill = 'white'), #???
             plot.background=element_rect(fill="white"),
             axis.line.x=element_line(linetype=1,color="black",size=1),
             axis.line.y=element_line(linetype=1,color="black",size=1)
              ) 
p1_lr
ggsave(p1_lr,  filename = paste("./DE_analysis/AF_unique_genes/scatter_ngenes_AF.pdf",sep=""), height = 4, width = 5)
#####


##### UPSET PLOT
# AFleft
# UPSET PLOT: Down
listInput = list()
j <- 1
for (i in cell_types) {

    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == i)$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == i)$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == i)$gene
    desired_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset ,  data_AFright_Ctrlright_Ctrlright_subset)
    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset, data_AFright_Ctrlright_Ctrlright_subset)))

    listInput[[i]] = desired_genes
}
#devtools::install_github("GuangchuangYu/UpSetR")
library(UpSetR)
p1 <- upset(fromList(listInput), order.by = "freq",nsets = 5)
require(ggplotify)
p2 <-  as.ggplot(p1)
p3 <- p2+ggtitle('cross downregulated Signature_AF_left')
p3
ggsave(p3,  filename = paste("./DE_analysis/AF_unique_genes/Cross_upset_AFleft_down.pdf",sep=""), height = 4, width = 5)


# UPSET PLOT: Up
listInput = list()
j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == i)$gene
    data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == i)$gene
    data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == i)$gene
        desired_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset,  data_AFright_Ctrlright_AFright_subset)
    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset, data_AFright_Ctrlright_AFright_subset)))
    
    listInput[[i]] = desired_genes
}
library(UpSetR)
p1 <- upset(fromList(listInput), order.by = "freq",nsets = 5)
require(ggplotify)
p2 <-  as.ggplot(p1)
p3 <- p2+ggtitle('cross upregulated Signature_AF_left')
p3
ggsave(p3,  filename = paste("./DE_analysis/AF_unique_genes/Cross_upset_AFleft_up.pdf",sep=""), height = 4, width = 5)


# AFright
# UPSET PLOT: Down
listInput = list()
j <- 1
for (i in cell_types) {

    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == i)$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == i)$gene
    data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == i)$gene
    
    desired_genes <- setdiff(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_Ctrlleft_Ctrlleft_subset)    
    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFleft_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFleft_subset, data_AFright_Ctrlright_Ctrlright_subset)))

    listInput[[i]] = desired_genes
}
library(UpSetR)
p1 <- upset(fromList(listInput), order.by = "freq",nsets = 5)
require(ggplotify)
p2 <-  as.ggplot(p1)
p3 <- p2+ggtitle('cross downregulated Signature_AF_right')
p3
ggsave(p3,  filename = paste("./DE_analysis/AF_unique_genes/Cross_upset_AFright_down.pdf",sep=""), height = 4, width = 5)

# UPSET PLOT: Up
listInput = list()
j <- 1
for (i in cell_types) {
    data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == i)$gene
    data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == i)$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == i)$gene
    
    desired_genes <- setdiff(data_AFright_Ctrlright_AFright_subset,  data_AFleft_Ctrlleft_AFleft_subset)
    #desired_genes <- setdiff(Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFright_subset)),
                             #Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFright_subset, data_AFright_Ctrlright_AFright_subset)))
    
    listInput[[i]] = desired_genes
}
library(UpSetR)
upset(fromList(listInput), order.by = "freq",nsets = 5)
p1 <- upset(fromList(listInput), order.by = "freq",nsets = 5)
require(ggplotify)
p2 <-  as.ggplot(p1)
p3 <- p2+ggtitle('cross upregulated Signature_AF_right')
p3
ggsave(p3,  filename = paste("./DE_analysis/AF_unique_genes/Cross_upset_AFright_up.pdf",sep=""), height = 4, width = 5)

#####


##### Venn Diagrams

# Prepare a palette of 3 colors with R colorbrewer:
library(RColorBrewer)
myCol <- brewer.pal(3, "Pastel2")
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")


#Total_2set
library(MetBrewer)
display_all()
new_colors2 <- paste0(met.brewer("Egypt"))
myCol <- new_colors2[c(1:2)]
data_AFleft_Ctrlleft_subset <- data_AFleft_Ctrlleft$gene #1490
data_AFright_Ctrlright_subset <- data_AFright_Ctrlright$gene #6
data_AFleft_AFright_subset <- data_AFleft_AFright$gene #621
p1 <- venn.diagram(
        x = list(data_AFleft_Ctrlleft_subset, 
                   data_AFright_Ctrlright_subset),
        category.names = c("AF_left vs Ctrl_left" , "AF_right vs Ctrl_right"),
        filename = NULL, 
scale = F,
        lwd = 2,
        lty = 'blank',
        fill = myCol,
        
        # Numbers
        cex = .4,
        fontface = "plain",
        fontfamily = "sans",
        
        # Set names
        cat.cex = 0.4,
        cat.fontface = "plain",
        cat.default.pos = "outer",
        cat.pos = c(-30, 30 ),
        cat.dist = c(0.055, 0.055 ),
        cat.fontfamily = "sans"
        #rotation = 1,
       # rotation.center = 30
)
p1
pdf("./DE_analysis/AF_unique_genes/Venn_total_AF_2set.pdf",width = 2, height = 2)
grid.draw(p1)
dev.off()
#####


#### heatmap
# Load libraries
library(scater)
library(Seurat)
library(tidyverse)
library(cowplot)
library(Matrix.utils)
library(edgeR)
library(dplyr)
library(magrittr)
library(Matrix)
library(purrr)
library(reshape2)
library(S4Vectors)
library(tibble)
library(SingleCellExperiment)
library(pheatmap)
library(apeglm)
library(png)
library(DESeq2)
library(RColorBrewer)
library(ArchR)
library(MetBrewer)


haf <- readRDS("D:/Work/AF/Rdata/Total/haf_01.RDS")
table(haf$group)
unique(haf$group)

seurat <- haf
seurat$sample <- gsub("-", "", seurat$sample)
seurat$sample <- gsub("_", "", seurat$sample)
seurat$cell_type <- gsub("-", "", seurat$cell_type)
seurat$cell_type <- gsub("_", "", seurat$cell_type)
seurat$group <- gsub("-", "", seurat$group)
seurat$group <- gsub("_", "", seurat$group)

# Extract raw counts and metadata to create SingleCellExperiment object
counts <- seurat@assays$RNA@counts 

metadata <- seurat@meta.data

# Set up metadata as desired for aggregation and DE analysis
metadata$cluster_id <- factor(seurat$cell_type)
#metadata$cluster_id <- factor(seurat$bulk) # all samples PCA
metadata$sample_id <- factor(seurat$group)
metadata$group_id <- factor(seurat$group)

# Create single cell experiment object
sce <- SingleCellExperiment(assays = list(counts = counts), 
                           colData = metadata)

# Identify groups for aggregation of counts
groups <- colData(sce)[, c("cluster_id", "sample_id")]

# Named vector of cluster names
kids <- purrr::set_names(levels(sce$cluster_id))

# Total number of clusters
nk <- length(kids)

# Named vector of sample names
sids <- purrr::set_names(levels(sce$sample_id))

# Total number of samples 
ns <- length(sids)

# Generate sample level metadata

## Turn named vector into a numeric vector of number of cells per sample
n_cells <- as.numeric(table(sce$sample_id))

## Determine how to reoder the samples (rows) of the metadata to match the order of sample names in sids vector
m <- match(sids, sce$sample_id)

## Create the sample level metadata by combining the reordered metadata with the number of cells corresponding to each sample.
ei <- data.frame(colData(sce)[m, ], 
                  n_cells, row.names = NULL) %>% 
                select(-"cluster_id")

# Perform QC if not already performed
dim(sce)

## Remove lowly expressed genes which have less than 10 cells with any counts
sce <- sce[rowSums(counts(sce) > 1) >= 10, ]

dim(sce)

# Aggregate the counts per sample_id and cluster_id

# Subset metadata to only include the cluster and sample IDs to aggregate across
groups <- colData(sce)[, c("cluster_id", "sample_id")]

# Aggregate across cluster-sample groups
pb <- aggregate.Matrix(t(counts(sce)), 
                       groupings = groups, fun = "sum") 

# Not every cluster is present in all samples; create a vector that represents how to split samples
splitf <- sapply(stringr::str_split(rownames(pb), 
                                    pattern = "_",  
                                    n = 2), 
                 `[`, 1)
# Turn into a list and split the list into components for each cluster and transform, so rows are genes and columns are samples and make rownames as the sample IDs
pb <- split.data.frame(pb, 
                       factor(splitf)) %>%
        lapply(function(u) 
                set_colnames(t(u), 
                             stringr::str_extract(rownames(u), "(?<=_)[:alnum:]+")))

# Print out the table of cells in each cluster-sample group
options(width = 100)
table(sce$cluster_id, sce$sample_id)

# Get sample names for each of the cell type clusters

# prep. data.frame for plotting
get_sample_ids <- function(x){
        pb[[x]] %>%
                colnames()
}

de_samples <- map(1:length(kids), get_sample_ids) %>%
        unlist()

# Get cluster IDs for each of the samples

samples_list <- map(1:length(kids), get_sample_ids)

get_cluster_ids <- function(x){
        rep(names(pb)[x], 
            each = length(samples_list[[x]]))
}

de_cluster_ids <- map(1:length(kids), get_cluster_ids) %>%
        unlist()

# Create a data frame with the sample IDs, cluster IDs and condition

gg_df <- data.frame(cluster_id = de_cluster_ids,
                    sample_id = de_samples)

gg_df <- left_join(gg_df, ei[, c("sample_id", "group_id")]) 


metadata <- gg_df %>%
        dplyr::select(cluster_id, sample_id, group_id) 
        
metadata      

unique(metadata$sample_id)
unique(metadata$group_id)
```

# Generate vector of cluster IDs
clusters <- unique(metadata$cluster_id)
clusters
```


# Heatmap of top genes (UP)
cell_types <- c("Adipocyte","Cardiomyocyte", "Endothelial", "Fibroblast", "Lymphoid", 'Mediate', "Mesothelial", "Myeloid", "Mural", "Neuron")

#Heart_map_unique_AFleft
# Cardiomyocyte
cluster_num <- 2
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Cardiomyocyte")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Cardiomyocyte")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Cardiomyocyte")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Cardiomyocyte_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Cardiomyocyte_up <- pheatmap(t(x), scale = "column", main = 'Cardiomyocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Cardiomyocyte_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Cardiomyocyte")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Cardiomyocyte")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Cardiomyocyte")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Cardiomyocyte_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Cardiomyocyte_down <- pheatmap(t(x), scale = "column", main = 'Cardiomyocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Cardiomyocyte_down

# Mesothelial
cluster_num <- 7
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Mesothelial")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Mesothelial")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Mesothelial")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Mesothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Mesothelial_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Mesothelial_up <- pheatmap(t(x), scale = "column", main = 'Mesothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Mesothelial_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Mesothelial")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Mesothelial")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Mesothelial")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Mesothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Mesothelial_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Mesothelial_down <- pheatmap(t(x), scale = "column", main = 'Mesothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Mesothelial_down

# Endothelial
cluster_num <- 3
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Endothelial")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Endothelial")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Endothelial")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Endothelial_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Endothelial_up <- pheatmap(t(x), scale = "column", main = 'Endothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Endothelial_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Endothelial")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Endothelial")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Endothelial")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Endothelial_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Endothelial_down <- pheatmap(t(x), scale = "column", main = 'Endothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Endothelial_down

# Adipocyte
cluster_num <- 1
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Adipocyte")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Adipocyte")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Adipocyte")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Adipocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Adipocyte_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Adipocyte_up <- pheatmap(t(x), scale = "column", main = 'Adipocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Adipocyte_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Adipocyte")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Adipocyte")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Adipocyte")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Adipocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Adipocyte_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Adipocyte_down <- pheatmap(t(x), scale = "column", main = 'Adipocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Adipocyte_down

# Fibroblast
cluster_num <- 4
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Fibroblast")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Fibroblast")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Fibroblast")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Fibroblast_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Fibroblast_up <- pheatmap(t(x), scale = "column", main = 'Fibroblast', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Fibroblast_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Fibroblast")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Fibroblast")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Fibroblast")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Fibroblast_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Fibroblast_down <- pheatmap(t(x), scale = "column", main = 'Fibroblast', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Fibroblast_down

# Mural
cluster_num <- 9
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Mural")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Mural")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Mural")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Mural_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Mural_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Mural_up <- pheatmap(t(x), scale = "column", main = 'Mural', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Mural_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Mural")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Mural")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Mural")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Mural_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Mural_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
Heat_Mural_down <- pheatmap(t(x), scale = "column", main = 'Mural', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Mural_down

# Myeloid
cluster_num <- 8
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Myeloid")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Myeloid")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Myeloid")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_AFleft_subset, data_AFleft_AFright_AFleft_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_AFright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_AFleft_subset, data_AFright_Ctrlright_AFright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Myeloid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Myeloid_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
colnames(x) <- c('AF_left', 'AF_right', 'Ctrl_left', 'Ctrl_right')
Heat_Myeloid_up <- pheatmap(t(x), scale = "column", main = 'Myeloid', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = T, show_colnames = F, legend = T, fontsize = 20)
Heat_Myeloid_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Myeloid")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Myeloid")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Myeloid")$gene
#s1 <- Reduce(intersect,list(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFleft_AFright_AFright_subset))
#AFleft_genes <- setdiff(s1, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_genes <- setdiff(data_AFleft_Ctrlleft_Ctrlleft_subset, data_AFright_Ctrlright_Ctrlright_subset)
AFleft_Ctrlleft <-read_delim("./DE_analysis/AFleft_Ctrlleft/Myeloid_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFleft_Ctrlleft <- filter(AFleft_Ctrlleft, AFleft_Ctrlleft$gene %in% AFleft_genes)
AFleft_Ctrlleft <- AFleft_Ctrlleft[order(-AFleft_Ctrlleft$log2FoldChange),] 
write.csv(AFleft_Ctrlleft, "./DE_analysis/AF_unique_genes/AFleft_Myeloid_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFleft_genes]
x <- t(x)
colnames(x) <- c('AF_left', 'AF_right', 'Ctrl_left', 'Ctrl_right')
Heat_Myeloid_down <- pheatmap(t(x), scale = "column", main = 'Myeloid', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = T, show_colnames = F, legend = T, fontsize = 20)
Heat_Myeloid_down


require(ggplotify)
Heat_Cardiomyocyte_up = as.ggplot(Heat_Cardiomyocyte_up)
Heat_Cardiomyocyte_down = as.ggplot(Heat_Cardiomyocyte_down)
Heat_Mesothelial_up = as.ggplot(Heat_Mesothelial_up)
Heat_Mesothelial_down = as.ggplot(Heat_Mesothelial_down)
Heat_Endothelial_up = as.ggplot(Heat_Endothelial_up)
Heat_Endothelial_down = as.ggplot(Heat_Endothelial_down)
Heat_Adipocyte_up = as.ggplot(Heat_Adipocyte_up)
Heat_Adipocyte_down = as.ggplot(Heat_Adipocyte_down)
Heat_Fibroblast_up = as.ggplot(Heat_Fibroblast_up)
Heat_Fibroblast_down = as.ggplot(Heat_Fibroblast_down)
Heat_Mural_up = as.ggplot(Heat_Mural_up)
Heat_Mural_down = as.ggplot(Heat_Mural_down)
Heat_Myeloid_up = as.ggplot(Heat_Myeloid_up)
Heat_Myeloid_down = as.ggplot(Heat_Myeloid_down)


p1 <- 
          (Heat_Cardiomyocyte_up/Heat_Cardiomyocyte_down) |
          (Heat_Adipocyte_up/Heat_Adipocyte_down) |
          (Heat_Endothelial_up/Heat_Endothelial_down) |
          (Heat_Mesothelial_up/Heat_Mesothelial_down) |
          (Heat_Mural_up/Heat_Mural_down) |
          (Heat_Fibroblast_up/Heat_Fibroblast_down) |
          (Heat_Myeloid_up/Heat_Myeloid_down)  + plot_layout( guides = 'collect')
p1
ggsave(plot=p1, filename="Heat_celltype_signature_AFleft.pdf",width = 22,height = 6)



#Heart_map_unique_AFright
# Endothelial
cluster_num <- 3
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Endothelial")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Endothelial")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Endothelial")$gene
AFright_genes <- setdiff(data_AFright_Ctrlright_AFright_subset, data_AFleft_Ctrlleft_AFleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Endothelial_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
Heat_Endothelial_up <- pheatmap(t(x), scale = "column", main = 'Endothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Endothelial_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Endothelial")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Endothelial")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Endothelial")$gene
 
AFright_genes <- setdiff(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_Ctrlleft_Ctrlleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Endothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Endothelial_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
Heat_Endothelial_down <- pheatmap(t(x), scale = "column", main = 'Endothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Endothelial_down


# Cardiomyocyte
cluster_num <- 2
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Cardiomyocyte")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Cardiomyocyte")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Cardiomyocyte")$gene
AFright_genes <- setdiff(data_AFright_Ctrlright_AFright_subset, data_AFleft_Ctrlleft_AFleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Cardiomyocyte_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
Heat_Cardiomyocyte_up <- pheatmap(t(x), scale = "column", main = 'Cardiomyocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Cardiomyocyte_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Cardiomyocyte")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Cardiomyocyte")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Cardiomyocyte")$gene
 
AFright_genes <- setdiff(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_Ctrlleft_Ctrlleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Cardiomyocyte_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Cardiomyocyte_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
Heat_Cardiomyocyte_down <- pheatmap(t(x), scale = "column", main = 'Cardiomyocyte', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Cardiomyocyte_down


# Mesothelial
cluster_num <- 7
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Mesothelial")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Mesothelial")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Mesothelial")$gene
AFright_genes <- setdiff(data_AFright_Ctrlright_AFright_subset, data_AFleft_Ctrlleft_AFleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Mesothelial_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Mesothelial_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
Heat_Mesothelial_up <- pheatmap(t(x), scale = "column", main = 'Mesothelial', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = F, show_colnames = F, legend = F, fontsize = 20)
Heat_Mesothelial_up
 

# Fibroblast
cluster_num <- 4
# Subset the metadata to only the desired cells
cluster_metadata <- metadata[which(metadata$cluster_id == clusters[cluster_num]), ]
# Assign the rownames of the metadata to be the sample IDs
rownames(cluster_metadata) <- cluster_metadata$sample_id
# Subset the counts to only the desired cells
counts <- pb[[clusters[cluster_num]]]
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
# Check that all of the row names of the metadata are the same and in the same order as the column names of the counts in order to use as input to DESeq2
all(rownames(cluster_metadata) == colnames(cluster_counts))   
rld <- rlog(as.matrix(cluster_counts))
#plot
data_AFleft_Ctrlleft_AFleft_subset <- filter(data_AFleft_Ctrlleft_AFleft, data_AFleft_Ctrlleft_AFleft$cell == "Fibroblast")$gene
data_AFright_Ctrlright_AFright_subset <- filter(data_AFright_Ctrlright_AFright, data_AFright_Ctrlright_AFright$cell == "Fibroblast")$gene
data_AFleft_AFright_AFleft_subset <- filter(data_AFleft_AFright_AFleft, data_AFleft_AFright_AFleft$cell == "Fibroblast")$gene
AFright_genes <- setdiff(data_AFright_Ctrlright_AFright_subset, data_AFleft_Ctrlleft_AFleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Fibroblast_up_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
colnames(x) <- c('AF_left', 'AF_right', 'Ctrl_left', 'Ctrl_right')
Heat_Fibroblast_up <- pheatmap(t(x), scale = "column", main = 'Fibroblast', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = T, show_colnames = F, legend = T, fontsize = 20)
Heat_Fibroblast_up
# Heatmap of top genes (DOWN)
    data_AFleft_Ctrlleft_Ctrlleft_subset <- filter(data_AFleft_Ctrlleft_Ctrlleft, data_AFleft_Ctrlleft_Ctrlleft$cell == "Fibroblast")$gene
    data_AFright_Ctrlright_Ctrlright_subset <- filter(data_AFright_Ctrlright_Ctrlright, data_AFright_Ctrlright_Ctrlright$cell == "Fibroblast")$gene
    data_AFleft_AFright_AFright_subset <- filter(data_AFleft_AFright_AFright, data_AFleft_AFright_AFright$cell == "Fibroblast")$gene
 
AFright_genes <- setdiff(data_AFright_Ctrlright_Ctrlright_subset, data_AFleft_Ctrlleft_Ctrlleft_subset )
AFright_Ctrlright <-read_delim("./DE_analysis/AFright_Ctrlright/Fibroblast_AF_vs_Ctrl_all_genes.csv", ",", escape_double = FALSE, trim_ws = TRUE)
AFright_Ctrlright <- filter(AFright_Ctrlright, AFright_Ctrlright$gene %in% AFright_genes)
AFright_Ctrlright <- AFright_Ctrlright[order(-AFright_Ctrlright$log2FoldChange),] 
write.csv(AFright_Ctrlright, "./DE_analysis/AF_unique_genes/AFright_Fibroblast_down_genes.csv",
          quote = FALSE, 
          row.names = FALSE)
x <- t(rld)[,AFright_genes]
x <- t(x)
colnames(x) <- c('AF_left', 'AF_right', 'Ctrl_left', 'Ctrl_right')
Heat_Fibroblast_down <- pheatmap(t(x), scale = "column", main = 'Fibroblast', border_color = NA, cluster_cols = FALSE, cluster_rows = F, show_rownames = T, show_colnames = F, legend = T, fontsize = 20)
Heat_Fibroblast_down

require(ggplotify)
Heat_Endothelial_up = as.ggplot(Heat_Endothelial_up)
Heat_Endothelial_down = as.ggplot(Heat_Endothelial_down)
Heat_Cardiomyocyte_up = as.ggplot(Heat_Cardiomyocyte_up)
Heat_Cardiomyocyte_down = as.ggplot(Heat_Cardiomyocyte_down)
Heat_Fibroblast_up = as.ggplot(Heat_Fibroblast_up)
Heat_Fibroblast_down = as.ggplot(Heat_Fibroblast_down)
Heat_Mesothelial_up = as.ggplot(Heat_Mesothelial_up)
Heat_Mesothelial_down = as.ggplot(Heat_Mesothelial_down)


p1 <- 
          (Heat_Endothelial_up/Heat_Endothelial_down) |
          (Heat_Cardiomyocyte_up/Heat_Cardiomyocyte_down) |
          (Heat_Mesothelial_up/plot_spacer()) |
          (Heat_Fibroblast_up/Heat_Fibroblast_down)
p1
ggsave(plot=p1, filename="Heat_celltype_signature_AFright.pdf",width = 14,height = 6)

